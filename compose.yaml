# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  reverse-proxy:
    image: traefik:v3.2
    command: --providers.docker
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  server:
    depends_on:
      - rabbitmq
      - db
    build:
      context: server
    labels:
      - traefik.http.routers.server.rule: PathPrefix(`/api`)
      - traefik.http.services.server.loadbalancer.server.port: 8080

  web-client:
    depends_on:
      - server
    build:
      context: client/web
    labels:
      - traefik.http.routers.web-client.rule: PathPrefix(`/`)
      - traefik.http.services.web-client.loadbalancer.server.port: 3000

  db:
    image: postgres:17.1
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}

  rabbitmq:
    image: rabbitmq:4.0

volumes:
  db-data:
