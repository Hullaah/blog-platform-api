// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid()) @db.Uuid
  username        String    @unique @db.VarChar(50)
  passwordHash    String    @db.VarChar(250)
  email           String    @db.VarChar(250)
  profile         Profile?
  writtenArticles Article[] @relation("writtenArticles")
  likedArticles   Article[] @relation("likes")
  comments        Comment[]
  followers       User[]    @relation("follows")
  following       User[]    @relation("follows")
}

model Profile {
  userId            String @unique @db.Uuid
  user              User   @relation(fields: [userId], references: [id])
  fullName          String @db.VarChar(100)
  bio               String @db.VarChar(500)
  profilePictureURL String @db.Char(100)
}

model Article {
  id         String     @id @default(uuid()) @db.Uuid
  author     User       @relation("writtenArticles", fields: [authorId], references: [id])
  authorId   String     @db.Uuid
  categories Category[]
  title      String     @db.VarChar(100)
  content    String
  comments   Comment[]
  likes      User[]     @relation("likes")
  views      Int
}

model Category {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  articles Article[]
}

model Comment {
  id              String    @id @default(uuid()) @db.Uuid
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @db.Uuid
  article         Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId       String?   @db.Uuid
  parentComment   Comment?  @relation("ParentComment", fields: [parentCommentId], references: [id])
  comments        Comment[] @relation("ParentComment")
  parentCommentId String?   @db.Uuid
}
